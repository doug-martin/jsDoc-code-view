<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
		<meta name="generator" content="JsDoc Toolkit" />
		{! Link.base = "../"; /* all generated links will be relative to this */ !}
		<title>JsDoc Reference - {+data.alias+}</title>

        <link type="text/css" href="../css/default.css" rel="stylesheet" />
        <script type="text/javascript" src="../js/jquery.js"></script>
        <script type="text/javascript" src="../js/menu.js"></script>
        <script type="text/javascript" src="../js/doc.js"></script>
        <script type="text/javaScript" src="../js/chili/jquery.chili-2.2.js"></script>
        <script type="text/javaScript" src="../js/chili/recipes.js"></script>
	</head>

	<body>

<!-- ============================== classes index ============================ -->
		<div id="menuContainer">
        		    <div id="menu">
        			    {+publish.classesIndex+}
        		    </div>
        		</div>
		<div class="contentContainer">
		<div id="content">
		<div class="section">
<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				{!
					var classType = "";
					
					if (data.isBuiltin()) {
						classType += "Built-In ";
					}
					
					if (data.isNamespace) {
						if (data.is('FUNCTION')) {
							classType += "Function ";
						}
						classType += "Namespace ";
					}
					else {
						classType += "Class ";
					}
				!}
				{+classType+}{+data.alias+}
			</h1>

<!-- ============================== class summary ========================== -->			
			<p class="description">
				<if test="data.version"><br />Version
					{+ data.version +}.<br />
				</if>
				<if test="data.augments.length"><br />Extends
					{+
						data.augments
						.sort()
						.map(
							function($) { return new Link().toSymbol($); }
						)
						.join(", ")
					+}.<br />
				</if>
			
				{+resolveLinks(data.classDesc)+}
				
				<if test="!data.isBuiltin()">{# isn't defined in any file #}
					<br /><i>Defined in: </i> {+new Link().toSrc(data.srcFile)+}.
				</if>
				<if test="data.inheritsFrom.length">
                                				<dl class="inheritsList">
                                				{!
                                					var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});

                                					var contributers = [];
                                					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                                					for (var i = 0, l = contributers.length; i < l; i++) {
                                						output +=
                                							"<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                                							+
                                							"<dd>" +
                                							borrowedMembers
                                							.filter(
                                								function($) { return $.memberOf == contributers[i] }
                                							)
                                							.sort(makeSortby("name"))
                                							.map(
                                								function($) { return new Link().toSymbol($.alias).withText($.name) }
                                							)
                                							.join(", ")
                                							+
                                							"</dd>";
                                					}
                                				!}
                                				</dl>
                                				</if>
                <if test="data.inheritsFrom.length">
                                				<dl class="inheritsList">
                                				{!
                                					var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
                                					var contributers = [];
                                					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                                					for (var i = 0, l = contributers.length; i < l; i++) {
                                						output +=
                                							"<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                                							+
                                							"<dd>" +
                                							borrowedMembers
                                							.filter(
                                								function($) { return $.memberOf == contributers[i] }
                                							)
                                							.sort(makeSortby("name"))
                                							.map(
                                								function($) { return new Link().toSymbol($.alias).withText($.name) }
                                							)
                                							.join(", ")
                                							+
                                							"</dd>";
                                					}

                                				!}
                                				</dl>
                                				</if>
                <if test="data.inheritsFrom.length">
                                				<dl class="inheritsList">
                                				{!
                                					var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
                                					var contributers = [];
                                					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
                                					for (var i = 0, l = contributers.length; i < l; i++) {
                                						output +=
                                							"<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                                							+
                                							"<dd>" +
                                							borrowedMembers
                                							.filter(
                                								function($) { return $.memberOf == contributers[i] }
                                							)
                                							.sort(makeSortby("name"))
                                							.map(
                                								function($) { return new Link().toSymbol($.alias).withText($.name) }
                                							)
                                							.join(", ")
                                							+
                                							"</dd>";
                                					}

                                				!}
                                				</dl>
                                				</if>
			</p>
            </div>
            <div class="classMemberMenu">
                <div class="memberMenuContent">
                <div class="classMemberMenuTitle">Class Table Of Contents</div>
                <!-- ============================== constructor summary ==================== -->
                			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">

                			   <div class="classMemberMenuSection">Constructor</div>
                			   <hr/>
                				<ul>
                				    <li>
                				        {+ new Link().toSymbol(data.alias).inner('constructor')+}
                				    </li>
                				</ul>
                			</if>

                <!-- ============================== properties toc ===================== -->
                			<if test="data.properties.length">
                				{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
                				<if test="ownProperties.length">
                				 <div class="classMemberMenuSection">Properties</div>
                				 <hr/>
	                             	<ul>
	                             	    	<for each="member" in="ownProperties">
	                             	    	       <li class="{!if (member.isPrivate) output += "lineThorough";
                                                            if (member.isInner) output += " underscore";
                                                            if (member.isStatic) output += " italic";
                                                            if (member.isConstant) output += " bold";
                                                            !}">

                                                    		{+new Link().toSymbol(member.alias).withText(member.name)+}
                                                </li>
                                          </for>
	                             	</ul>
                				</if>
                			</if>

                <!-- ============================== methods toc ======================== -->
                            <if test="data.methods.length">
                                {! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
                                	<if test="ownMethods.length">
                                	 <div class="classMemberMenuSection">Methods</div>
                                	 <hr/>
                	                 <ul>
                	                     	<for each="member" in="ownMethods">
                	                     	       <li class="{!if (member.isPrivate) output += "lineThorough";
                                                                if (member.isInner) output += " underscore";
                                                                if (member.isStatic) output += " italic";
                                                                if (member.isConstant) output += " bold";
                                                                !}">

                                                        		{+new Link().toSymbol(member.alias).withText(member.name)+}
                                                    </li>
                                              </for>
                	                 </ul>
                                	</if>
                             </if>

                <!-- ============================== events toc ======================== -->
                			<if test="data.events.length">
                			    {! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
                                 	<if test="ownEvents.length">
                                 	 <div class="classMemberMenuSection">Events</div>
                                 	 <hr/>
                                     <ul>
                                         	<for each="member" in="ownEvents">
                                         	       <li class="{!if (member.isPrivate) output += "lineThorough";
                                                                if (member.isInner) output += " underscore";
                                                                if (member.isStatic) output += " italic";
                                                                if (member.isConstant) output += " bold";
                                                                !}">

                                                        		{+new Link().toSymbol(member.alias).withText(member.name)+}
                                                    </li>
                                           </for>
                                     </ul>
                                 	</if>
                             </if>
                 </div>

            </div>


<!-- ============================== constructor details ==================== -->		
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
			<div class="section">
			<div class="sectionTitle">
            					{+classType+}Detail
            				</div>
			<div class="methodDetail"><a name="constructor"> </a>
				
				<div class="fixedFont">{!
					if (data.isPrivate) output += "&lt;private&gt; ";
					if (data.isInner) output += "&lt;inner&gt; ";
				!}
						<b>{+ data.alias +}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
				</div>
				
				<div class="description">
					{+resolveLinks(data.desc)+}
					<if test="data.author"><br /><i>Author: </i>{+data.author+}.</if>
				</div>
				
				<if test="data.example.length">
				<for each="example" in="data.example">
				<div class="exampleCode">
				    <h4>Example {+$example_key + 1+} : </h4>
				    <pre class="code">{+example+}</pre>
				</div>
				</for>
				</if>
				
				
					<if test="data.params.length">
						<dl class="detailList">
						<dt class="heading">Parameters:</dt>
						<for each="item" in="data.params">
							<dt>
								{+((item.type)?""+("<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type)+"}</span> ")) : "")+} <b>{+item.name+}</b>
								<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
							</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.deprecated">
						<dl class="detailList">
						<dt class="heading">Deprecated:</dt>
						<dt>
							{+resolveLinks(data.deprecated)+}
						</dt>
						</dl>
					</if>
					<if test="data.since">
						<dl class="detailList">
						<dt class="heading">Since:</dt>
							<dd>{+ data.since +}</dd>
						</dl>
					</if>
					<if test="data.exceptions.length">
						<dl class="detailList">
						<dt class="heading">Throws:</dt>
						<for each="item" in="data.exceptions">
							<dt>
								{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
							</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.returns.length">
						<dl class="detailList">
						<dt class="heading">Returns:</dt>
						<for each="item" in="data.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.requires.length">
						<dl class="detailList">
						<dt class="heading">Requires:</dt>
						<for each="item" in="data.requires">
							<dd>{+ new Link().toSymbol(item) +}</dd>
						</for>
						</dl>
					</if>
					<if test="data.see.length">
						<dl class="detailList">
						<dt class="heading">See:</dt>
						<for each="item" in="data.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
						</for>
						</dl>
					</if>
					<if test="data.code.length">
                        <div class="sourceCode">
                            <pre class="code">{+data.code+}</pre>
                        </div>
                    </if>

			</div>
			</div>
			</if>

<!-- ============================== field details ========================== -->		
			<if test="defined(ownProperties) && ownProperties.length">
			<div class="section">
				<div class="sectionTitle">
					Field Detail
				</div>
				<for each="member" in="ownProperties">
				<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
				<div class="methodDetail">
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
						if (member.isConstant) output += "&lt;constant&gt; ";
					!}
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example.length">
					<for each="example" in="member.example">
					    <div class="exampleCode">
                        				    <h4>Example {+$example_key + 1+} : </h4>
                        				    <pre class="code">{+example+}</pre>
                        				</div>
					</for>
					</if>

						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.defaultValue">
							<dl class="detailList">
							<dt class="heading">Default Value:</dt>
							<dd>
								{+resolveLinks(member.defaultValue)+}
							</dd>
							</dl>
						</if>

                       <if test="member.code.length">
                                               	<div class="sourceCode">
                                                       <pre class="code">{+member.code+}</pre>
                                                   </div>
                                               </if>
					</div>
				</for>
				</div>
			</if>

<!-- ============================== method details ========================= -->		
			<if test="defined(ownMethods) && ownMethods.length">
			<div class="section">
				<div class="sectionTitle">
					Method Detail
				</div>
				<for each="member" in="ownMethods">
				<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
				<div class="methodDetail">
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name.replace(/\^\d+$/, '')+}</b>{+makeSignature(member.params)+}
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example.length">
					<for each="example" in="member.example">
					   <div class="exampleCode">
                       				    <h4>Example {+$example_key + 1+} : </h4>
                       				    <pre class="code">{+example+}</pre>
                       				</div>
					</for>
					</if>
					
						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
							</dl>
						</if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.returns.length">
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							<for each="item" in="member.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.requires.length">
							<dl class="detailList">
							<dt class="heading">Requires:</dt>
							<for each="item" in="member.requires">
								<dd>{+ resolveLinks(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
								<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.code.length">
                        	<div class="sourceCode">
                                <pre class="code">{+member.code+}</pre>
                            </div>
                        </if>
                    </div>
				</for>
				</div>
			</if>
			
<!-- ============================== event details ========================= -->		
			<if test="defined(ownEvents) && ownEvents.length">
				<div class="sectionTitle">
					Event Detail
				</div>
				<for each="member" in="ownEvents">
				   <a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.srcFile != data.srcFile">
							<br />
							<i>Defined in: </i> {+new Link().toSrc(member.srcFile)+}.
						</if>
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example.length">
					<for each="example" in="member.example">
                        <div class="exampleCode">
                        				    <h4>Example {+$example_key + 1+} : </h4>
                        				    <pre class="code">{+example+}</pre>
                        				</div>
					</for>
					</if>
					
						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ resolveLinks(member.deprecated) +}
							</dt>
							</dl>
						</if>
						<if test="member.since">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
							</dl>
						</if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.returns.length">
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							<for each="item" in="member.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.requires.length">
							<dl class="detailList">
							<dt class="heading">Requires:</dt>
							<for each="item" in="member.requires">
								<dd>{+ resolveLinks(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
								<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>
					<if test="!$member_last"><hr /></if>
				</for>
			</if>
			
			<hr />
		</div>
       </div>
		
<!-- ============================== footer ================================= -->
		<div class="fineprint" style="clear:both">
			<if test="JSDOC.opt.D.copyright">&copy;{+JSDOC.opt.D.copyright+}<br /></if>
			Documentation generated by <a href="http://code.google.com/p/jsdoc-toolkit/" target="_blank">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}
		</div>
	</body>
</html>
